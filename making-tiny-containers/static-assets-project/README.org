* Static assets project
We're going to construct a very basic front end website with React, TypeScript, and Sass. 

**** create react app
~npx --ignore-existing create-react-app static-assets-project --template typescript --use-npm~

#+begin_comment
Note: create-react-app has been having issues with global installs of create-react-app. If you have it install globally right now, please uninstall it and use the above command.
#+end_comment

**** sass
~npm install node-sass~ and:
- fix existing ~.css~ file extensions to ~.scss~
- Update the two ~.css~ imports in ~App.tsx~ and ~index.tsx~

**** verify that the installation works
~npm run start~ and then ~npm run build~

** Project Description
The project is to make a multi-stage Dockerfile that build the project in one container and then serves it from a different container using NGINX. If you're not familiar with NGINX, fear not! It is a static file server, which is to say it take takes HTML, CSS, JS, images, fonts, etc. and serves them to your users. It handles all the serving and file headers for you. Using it can be accomplished in few steps. You'll use the nginx:latest (or nginx:alpine! up to you) container and copy just the newly built files, not everything (which is in the build directory inside of the CRA app) to /usr/share/nginx/html and the nginx will take care of the rest. The nginx container defines CMD in it and if you don't override it, it starts NGINX for you. Give it a shot! Once you've tried, come back here and we'll do the solution together. NGINX runs on port 80 by default, so you probably want to route that something like 8080 on your host machine (otherwise you have to run it as root which no one wants to do.)

** My solution
*** Dockerfile instructions
#+begin_src 
# build stage
FROM node:latest
WORKDIR /app
COPY . .
RUN npm ci && npm run build

# runtime stage
# you could totally use nginx:alpine here too
FROM nginx:latest
COPY --from=0 /app/build /usr/share/nginx/html
#+end_src

*** Instructions on running the multi staged container
#+begin_src 
docker build -t static-app .
docker run -p 8080:80 static-app
#+end_src
